<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<comment>movie-mapper</comment>
	<entry key="selectCurrentList">
		SELECT *      
		FROM (SELECT ROWNUM RNUM, A.*
      		  FROM (
					SELECT MNO, MNAME, GENRE, RATE
					FROM MOVIE 
					WHERE STATUS = 'Y'
					) A)
		WHERE RNUM BETWEEN ? AND ?
		
		<!-- SELECT *
		FROM (
		SELECT MNO, MNAME, GENRE, RATE, 예매율
		FROM MOVIE 
		WHERE STATUS = 'Y'
		ORDER BY 예매율
		)
		WHERE ROWNUM BETWEEN ? AND ?
		rownum은 rename해줘야하는거 체크하기 -->
	</entry>
	
	
	<!-- 
	예매율 : 조회한 기간의 관객수 / 배정된 좌석수 
	배정된 좌석 수 : 상영일정 테이블에서 영화번호, 상영관 번호에서 좌석수 조회해서 다 더하기
	SELECT COUNT('MNO') FROM 
	영화 관람등급을 NOT NULL로 둘지 고민
	 -->

	 <entry key="selectMovieDetail">
		SELECT MNO, MNAME, GENRE, DIRECTOR, RTIME, RATE, RELEASE_DATE, NVL(RE_AVG,0) RE_AVG, NVL(MO_LIKE, 0) MO_LIKE, NVL(MY_LIKE, 'N') MY_LIKE, SYNOPSIS, ACTOR
		FROM MOVIE M
		LEFT JOIN (SELECT TRUNC(AVG(REVIEW_GRADE),1) RE_AVG, MNO
		            FROM REVIEW
		            GROUP BY MNO) R USING(MNO)
		LEFT JOIN (SELECT MNO, COUNT(MO_LIKE_NO) MO_LIKE
		            FROM MOVIE_LIKE
		            GROUP BY MNO) L USING(MNO)
		LEFT JOIN (SELECT MNO, CASE WHEN MNO = ? AND MEMBER_NO = ? THEN 'Y'
		            ELSE 'N'
		            END MY_LIKE
		            FROM MOVIE_LIKE) ML USING(MNO)
		WHERE MNO = ?
	 </entry>
	 
	 <entry key="selectMovieSummary">
		SELECT MNO, MNAME, GENRE, DIRECTOR, RTIME, RATE, RELEASE_DATE, NVL(RE_AVG,0) RE_AVG, NVL(MO_LIKE, 0) MO_LIKE, NVL(MY_LIKE, 'N') MY_LIKE
		FROM MOVIE M
		LEFT JOIN (SELECT TRUNC(AVG(REVIEW_GRADE),1) RE_AVG, MNO
		            FROM REVIEW
		            GROUP BY MNO) R USING(MNO)
		LEFT JOIN (SELECT MNO, COUNT(MO_LIKE_NO) MO_LIKE
		            FROM MOVIE_LIKE
		            GROUP BY MNO) L USING(MNO)
		LEFT JOIN (SELECT MNO, CASE WHEN MNO = ? AND MEMBER_NO = ? THEN 'Y'
		            ELSE 'N'
		            END MY_LIKE
		            FROM MOVIE_LIKE) ML USING(MNO)
		WHERE MNO = ?
	 </entry>
	 
	 <entry key="selectReviewListNo">
		SELECT REVIEW_NO, REVIEW_CONTENT, REVIEW_GRADE, REVIEW_DATE, MEMBER_ID, REVIEW_LIKE, MY_LIKE
		FROM(
		SELECT REVIEW_NO, REVIEW_CONTENT, REVIEW_GRADE, REVIEW_DATE, MEMBER_ID, REVIEW_LIKE,  ROWNUM RNUM, MY_LIKE
		FROM (
		SELECT REVIEW_NO, REVIEW_CONTENT, REVIEW_GRADE, REVIEW_DATE, MEMBER_ID, NVL(RE_LIKE, 0) "REVIEW_LIKE", NVL(MY_LIKE,'N') MY_LIKE
		FROM REVIEW R
		JOIN MEMBER M USING(MEMBER_NO)
		LEFT JOIN ( SELECT REVIEW_NO, COUNT(REVIEW_NO) RE_LIKE
		            FROM REVIEW_LIKE
		            GROUP BY REVIEW_NO) L USING(REVIEW_NO)
		LEFT JOIN (SELECT REVIEW_NO, CASE WHEN MEMBER_NO = ? THEN 'Y'
		            ELSE 'N'
		            END MY_LIKE
		            FROM REVIEW_LIKE
		            WHERE MEMBER_NO = ?) RL USING(REVIEW_NO)
		WHERE R.STATUS = 'Y' AND MNO = ?
		ORDER BY REVIEW_NO DESC
		) A)
		WHERE RNUM BETWEEN ? AND ?
	 </entry>
	 
	 <entry key="selectReviewListLike">
		SELECT REVIEW_NO, REVIEW_CONTENT, REVIEW_GRADE, REVIEW_DATE, MEMBER_ID, REVIEW_LIKE, MY_LIKE
		FROM(
		SELECT REVIEW_NO, REVIEW_CONTENT, REVIEW_GRADE, REVIEW_DATE, MEMBER_ID, REVIEW_LIKE,  ROWNUM RNUM, MY_LIKE
		FROM (
		SELECT REVIEW_NO, REVIEW_CONTENT, REVIEW_GRADE, REVIEW_DATE, MEMBER_ID, NVL(RE_LIKE, 0) "REVIEW_LIKE", NVL(MY_LIKE,'N') MY_LIKE
		FROM REVIEW R
		JOIN MEMBER M USING(MEMBER_NO)
		LEFT JOIN ( SELECT REVIEW_NO, COUNT(REVIEW_NO) RE_LIKE
		            FROM REVIEW_LIKE
		            GROUP BY REVIEW_NO) L USING(REVIEW_NO)
		LEFT JOIN (SELECT REVIEW_NO, CASE WHEN MEMBER_NO = ? THEN 'Y'
		            ELSE 'N'
		            END MY_LIKE
		            FROM REVIEW_LIKE
		            WHERE MEMBER_NO = ?) RL USING(REVIEW_NO)
		WHERE R.STATUS = 'Y' AND MNO = ?
		ORDER BY REVIEW_LIKE DESC
		) A)
		WHERE RNUM BETWEEN ? AND ?
	 </entry>
	 
	 <entry key="selectPicture"><!-- 영화 하나의 PICTURE -->
	 	SELECT * FROM PICTURE WHERE MNO=?
	 </entry>
	 
	 <entry key="selectPosterList"><!-- 영화 하나의 POSTER -->
	 	SELECT * FROM PICTURE WHERE FILE_LEVEL=1 AND MNO=?
	 </entry>
	 
	 <entry key="insertReview">
	 	INSERT INTO REVIEW(REVIEW_NO, REVIEW_CONTENT, REVIEW_GRADE, MNO, MEMBER_NO, PAY_NO) VALUES(SEQ_RE_NO.NEXTVAL, ?, ?, ?, ?, ?)
	 </entry>
	 
	 <entry key="deleteReview">
	 	UPDATE REVIEW SET STATUS = 'N' WHERE REVIEW_NO = ?
	 </entry>
	 
	 <entry key="deleteReviewLike">
	 	DELETE FROM REVIEW_LIKE WHERE MEMBER_NO = ? AND REVIEW_NO = ?
	 </entry>
	 
	 <entry key="insertReviewLike">
	 	INSERT INTO REVIEW_LIKE VALUES(SEQ_RE_LIKE_NO.NEXTVAL, ?, ?)
	 </entry>
	 
	 <entry key="deleteMovieLike">
	 	DELETE FROM MOVIE_LIKE WHERE MNO = ? AND MEMBER_NO = ?  
	 </entry>
	 
	 <entry key="insertMovieLike">
	 	INSERT INTO MOVIE_LIKE VALUES(SEQ_MO_LIKE_NO.NEXTVAL, ?, ?)
	 </entry>
	 
	 <entry key="reportReview">
	 	INSERT INTO REPORT VALUES(SEQ_REPORT_NO.NEXTVAL, ?, ?)
	 </entry>
	 
	 <!-- ADMIN -->
	 <entry key="selectReportList">
	 	SELECT REPORT_NO, REVIEW_NO, REVIEW_CONTENT, REVIEW_DATE, REASON, STATUS, RNUM
		FROM(
		    SELECT REPORT_NO, REVIEW_NO, REVIEW_CONTENT, REVIEW_DATE, REASON, STATUS, ROWNUM RNUM
		    FROM (
		        SELECT REPORT_NO, REVIEW_NO, REVIEW_CONTENT, REVIEW_DATE, REASON, RP.STATUS STATUS
		        FROM REPORT RP
		        JOIN REVIEW RV USING(REVIEW_NO)
		        ORDER BY REPORT_NO DESC
		    ) 
		A)
		WHERE RNUM BETWEEN ? AND ?
	 </entry>
	 <entry key="countReport">
	 	SELECT COUNT(REPORT_NO) COUNT
		FROM REPORT
		WHERE STATUS = 'Y'
	 </entry>
	 <entry key="selectReportList">
	 	SELECT REPORT_NO, REVIEW_NO, REVIEW_CONTENT, REPORT_DATE, CATEGORY_CONTENT, STATUS
		FROM(
		    SELECT REPORT_NO, REVIEW_NO, REVIEW_CONTENT, REPORT_DATE, CATEGORY_CONTENT, STATUS, ROWNUM RNUM
		    FROM (
		        SELECT REPORT_NO, REVIEW_NO, REVIEW_CONTENT, REPORT_DATE, CATEGORY_CONTENT, RP.STATUS STATUS
		        FROM REPORT RP
		        JOIN REVIEW RV USING(REVIEW_NO)
		        JOIN REPORT_CATEGORY ON(REASON = CATEGORY_NO)
		        ORDER BY REPORT_NO DESC
		    ) 
		A)
		WHERE RNUM BETWEEN ? AND ?
	 </entry>
	 <entry key="deleteReviewByReport">
	 	UPDATE REVIEW SET STATUS = 'N' WHERE REVIEW_NO = ?
	 </entry>
	 <entry key="processReport">
	 	UPDATE REPORT SET STATUS = 'Y' WHERE REVIEW_NO = ?
	 </entry>
	 <entry key="holdReviewByReport">
	 	UPDATE REPORT SET STATUS = 'H' WHERE REPORT_NO = ?
	 </entry>
	 <entry key="countAllMovie">
	 	SELECT COUNT(MNO) COUNT
		FROM MOVIE
	 </entry>
	 <entry key="selectMovieAdminList">
	 	SELECT MNO, MNAME, GENRE, RTIME, RATE, STATUS, RELEASE_DATE
		FROM (
			SELECT MNO, MNAME, GENRE, RTIME, RATE, STATUS, RELEASE_DATE, ROWNUM RNUM 
			FROM(
				SELECT MNO, MNAME, GENRE, RTIME, RATE, STATUS, RELEASE_DATE 
				FROM MOVIE
				ORDER BY MNO DESC)
		)
		WHERE RNUM BETWEEN ? AND ?
	 </entry>
	 <entry key="deleteMovie">
	 	DELETE FROM MOVIE WHERE MNO = ? 
	 </entry>
</properties>